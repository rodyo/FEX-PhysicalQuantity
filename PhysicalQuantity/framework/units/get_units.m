function varargout = get_units(which_one)
    
    % Instantiating the units may take some time, therefore, do it only once and
    % save as a persistent variable to improve upon performance. 
    persistent All_Units    
    persistent All_Units_Concatenated
    if isempty(All_Units)   
        
        % TODO: (Rody) file cache!!
        
        All_Units = struct(...
                           %{
                           SI basic quantities
                           %}
                           'length_units'             , LengthUnits(),...
                           'mass_units'               , MassUnits(),...
                           'time_units'               , TimeUnits(),...
                           'current_units'            , CurrentUnits(),...
                           'resistance_units'         , ResistanceUnits(),...
                           'conductance_units'        , ConductanceUnits(),...
                           %{
                           %}
                           'magnetic_flux'            , MagneticFluxUnits(),...                      
                           %{
                           %}
                           'temperature_units'        , TemperatureUnits(),...
                           'luminous_intensity_units' , LuminousIntensityUnits(),...
                           'amount_of_substance_units', AmountOfSubstanceUnits(),...
                           %{
                           Dimensionless quantities
                           %}
                           'no_units'                 , NoUnits(),...
                           'angle_units'              , AngleUnits(),...
                           'solidangle_units'         , SolidAngleUnits(),...
                           %{
                           %}
                           'force_units'              , ForceUnits(),...
                           'energy_units'             , EnergyUnits(),...
                           %{
                           %}
                           'area_units'               , AreaUnits(),...
                           'volume_units'             , VolumeUnits(),...
                           'pressure_units'           , PressureUnits(),...
                           %{
                           %}
                           'speed_units'              , SpeedUnits() ...
                           );
        
    end
    
    % No argument - print list and return 
    fn = fieldnames(All_Units);
    if nargin == 0                
        fprintf(1, 'Available units:\n%s',...
                sprintf('  - %s\n', fn{:}));
        return; 
    end
    
    % Checks
    assert(nargin==1 && nargout<=1,...
           [mfilename ':argument_count'],...
           '%s() only takes 1 argument, and returns 1 argument.',...
           mfilename);
        
    assert(ischar(which_one) && isvector(which_one),...
           [mfilename ':invalid_input_argument'],...
           'The input argument to %s() must be a character array.',...
           mfilename);       
    
    assert(any( strcmp([fn; 'all_units'], which_one) ),...
           [mfilename ':name_not_found'],...
           'No units called ''%s'' registered in %s().',...
           which_one, mfilename);
    
    % Return desired slice
    switch which_one
        
        case 'all_units'
            if isempty(All_Units_Concatenated)
                u = [];
                for ii = 1:numel(fn)
                    u = [u; All_Units.(fn{ii}).getAllUnits()]; end %#ok<AGROW>
                All_Units_Concatenated = u;
            end
            units = All_Units_Concatenated;
            
        otherwise
            % Simply index and return the result
            units = All_Units.(which_one);
    end
    
    varargout{1} = units;
    
end
